/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Trader as PrismaTrader,
  Following as PrismaFollowing,
  Position as PrismaPosition,
} from "@prisma/client";

export class TraderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TraderCountArgs, "select">): Promise<number> {
    return this.prisma.trader.count(args);
  }

  async traders(args: Prisma.TraderFindManyArgs): Promise<PrismaTrader[]> {
    return this.prisma.trader.findMany(args);
  }
  async trader(
    args: Prisma.TraderFindUniqueArgs
  ): Promise<PrismaTrader | null> {
    return this.prisma.trader.findUnique(args);
  }
  async createTrader(args: Prisma.TraderCreateArgs): Promise<PrismaTrader> {
    return this.prisma.trader.create(args);
  }
  async updateTrader(args: Prisma.TraderUpdateArgs): Promise<PrismaTrader> {
    return this.prisma.trader.update(args);
  }
  async deleteTrader(args: Prisma.TraderDeleteArgs): Promise<PrismaTrader> {
    return this.prisma.trader.delete(args);
  }

  async findFollowings(
    parentId: string,
    args: Prisma.FollowingFindManyArgs
  ): Promise<PrismaFollowing[]> {
    return this.prisma.trader
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .followings(args);
  }

  async findPositions(
    parentId: string,
    args: Prisma.PositionFindManyArgs
  ): Promise<PrismaPosition[]> {
    return this.prisma.trader
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .positions(args);
  }
}
