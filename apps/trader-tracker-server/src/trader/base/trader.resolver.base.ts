/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Trader } from "./Trader";
import { TraderCountArgs } from "./TraderCountArgs";
import { TraderFindManyArgs } from "./TraderFindManyArgs";
import { TraderFindUniqueArgs } from "./TraderFindUniqueArgs";
import { CreateTraderArgs } from "./CreateTraderArgs";
import { UpdateTraderArgs } from "./UpdateTraderArgs";
import { DeleteTraderArgs } from "./DeleteTraderArgs";
import { FollowingFindManyArgs } from "../../following/base/FollowingFindManyArgs";
import { Following } from "../../following/base/Following";
import { PositionFindManyArgs } from "../../position/base/PositionFindManyArgs";
import { Position } from "../../position/base/Position";
import { TraderService } from "../trader.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Trader)
export class TraderResolverBase {
  constructor(
    protected readonly service: TraderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Trader",
    action: "read",
    possession: "any",
  })
  async _tradersMeta(
    @graphql.Args() args: TraderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Trader])
  @nestAccessControl.UseRoles({
    resource: "Trader",
    action: "read",
    possession: "any",
  })
  async traders(@graphql.Args() args: TraderFindManyArgs): Promise<Trader[]> {
    return this.service.traders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Trader, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Trader",
    action: "read",
    possession: "own",
  })
  async trader(
    @graphql.Args() args: TraderFindUniqueArgs
  ): Promise<Trader | null> {
    const result = await this.service.trader(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Trader)
  @nestAccessControl.UseRoles({
    resource: "Trader",
    action: "create",
    possession: "any",
  })
  async createTrader(@graphql.Args() args: CreateTraderArgs): Promise<Trader> {
    return await this.service.createTrader({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Trader)
  @nestAccessControl.UseRoles({
    resource: "Trader",
    action: "update",
    possession: "any",
  })
  async updateTrader(
    @graphql.Args() args: UpdateTraderArgs
  ): Promise<Trader | null> {
    try {
      return await this.service.updateTrader({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Trader)
  @nestAccessControl.UseRoles({
    resource: "Trader",
    action: "delete",
    possession: "any",
  })
  async deleteTrader(
    @graphql.Args() args: DeleteTraderArgs
  ): Promise<Trader | null> {
    try {
      return await this.service.deleteTrader(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Following], { name: "followings" })
  @nestAccessControl.UseRoles({
    resource: "Following",
    action: "read",
    possession: "any",
  })
  async findFollowings(
    @graphql.Parent() parent: Trader,
    @graphql.Args() args: FollowingFindManyArgs
  ): Promise<Following[]> {
    const results = await this.service.findFollowings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Position], { name: "positions" })
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "read",
    possession: "any",
  })
  async findPositions(
    @graphql.Parent() parent: Trader,
    @graphql.Args() args: PositionFindManyArgs
  ): Promise<Position[]> {
    const results = await this.service.findPositions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
