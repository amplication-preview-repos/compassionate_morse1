/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Following as PrismaFollowing,
  Trader as PrismaTrader,
} from "@prisma/client";

export class FollowingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FollowingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.following.count(args);
  }

  async followings(
    args: Prisma.FollowingFindManyArgs
  ): Promise<PrismaFollowing[]> {
    return this.prisma.following.findMany(args);
  }
  async following(
    args: Prisma.FollowingFindUniqueArgs
  ): Promise<PrismaFollowing | null> {
    return this.prisma.following.findUnique(args);
  }
  async createFollowing(
    args: Prisma.FollowingCreateArgs
  ): Promise<PrismaFollowing> {
    return this.prisma.following.create(args);
  }
  async updateFollowing(
    args: Prisma.FollowingUpdateArgs
  ): Promise<PrismaFollowing> {
    return this.prisma.following.update(args);
  }
  async deleteFollowing(
    args: Prisma.FollowingDeleteArgs
  ): Promise<PrismaFollowing> {
    return this.prisma.following.delete(args);
  }

  async getTrader(parentId: string): Promise<PrismaTrader | null> {
    return this.prisma.following
      .findUnique({
        where: { id: parentId },
      })
      .trader();
  }
}
